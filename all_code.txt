### ./reservation/asgi.py ###
"""
ASGI config for reservation project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reservation.settings')

application = get_asgi_application()
### ./reservation/__init__.py ###
### ./reservation/settings.py ###
"""
Django settings for reservation project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vz5xgkl$efd1_gyhw#pq^y*kmn65-6uy0ub55o*l=1c#8zep&r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'reserve',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'reservation.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'reservation.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
### ./reservation/urls.py ###
"""
URL configuration for reservation project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path,include


# 最初に見られるurl部分　path('reserve/', include('reserve.urls'))でreserveアプリケーションに飛ぶことができる
# アプリケーションが増えるごとにマッピング
urlpatterns = [
    path('admin/', admin.site.urls),
    path('reserve/', include('reserve.urls')),
]
### ./reservation/wsgi.py ###
"""
WSGI config for reservation project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reservation.settings')

application = get_wsgi_application()
### ./manage.py ###
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reservation.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
### ./reserve/migrations/__init__.py ###
### ./reserve/migrations/0001_initial.py ###
# Generated by Django 5.1.5 on 2025-06-03 15:44

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Current_reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reserve.client')),
            ],
        ),
        migrations.AddField(
            model_name='client',
            name='current',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reserve.current_reservation'),
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reserve.client')),
            ],
        ),
        migrations.AddField(
            model_name='current_reservation',
            name='employee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reserve.employee'),
        ),
        migrations.CreateModel(
            name='Past_reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reserve.employee')),
            ],
        ),
        migrations.AddField(
            model_name='client',
            name='past',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reserve.past_reservation'),
        ),
    ]
### ./reserve/models.py ###
from django.db import models

# Create your models here.

class Client(models.Model):
    name = models.CharField
    # 男＝true　女＝false　それ以外＝null
    gender = models.NullBooleanField
    age = models.IntegerField
    past = models.ForeignKey('Past_reservation', on_delete=models.CASCADE)
    current = models.ForeignKey('Current_reservation',on_delete=models.CASCADE)
    exsistence_current_reservation = models.BooleanField

class Employee(models.Model):
    name = models.CharField
    # 男＝true　女＝false　それ以外＝null
    gender = models.NullBooleanField
    age = models.IntegerField
    customer = models.ForeignKey('Client',on_delete=models.CASCADE)
    # Clientオブジェクトから予約を使う

class Current_reservation(models.Model):
    customer = models.ForeignKey('Client',on_delete=models.CASCADE)
    employee = models.ForeignKey('Employee',on_delete=models.CASCADE)
    date_time = models.DateTimeField
    purpose = models.CharField

class Past_reservation(models.Model):
    purpose = models.CharField
    employee = models.ForeignKey('Employee',on_delete=models.CASCADE)
    date_time = models.DateTimeField### ./reserve/__init__.py ###
### ./reserve/apps.py ###
from django.apps import AppConfig


class ReserveConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'reserve'
### ./reserve/admin.py ###
from django.contrib import admin

# Register your models here.
### ./reserve/tests.py ###
from django.test import TestCase

# Create your tests here.
### ./reserve/urls.py ###
from django.urls import path
from. import views

# アプリケーションのurls.pyの次に見られる
# アプリケーションのurls.pyのpath('reserve/', include('reserve.urls')),からこのページに飛ぶ
urlpatterns= [
    # path('', views.index, name='index'),
    # reserveアプリケーションのviewsのhomwメソッドにアクセス
    path('', views.home, name='home'),
    path('reserve', views.reserve, name='reserve'),
    path('reservedetails', views.reservedetails, name='reservedetails'),
    path('mypage', views.mypage, name='mypage'),
    path('mypagesettings', views.mypagesettings, name='mypagesettings'),
    path('login', views.login, name='login'),
    path('register', views.register, name='register'),
]### ./reserve/views.py ###
from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.

# viewの関数を作成するごとにページを増やすことができる
# def index(request):
#     return HttpResponse('Hello World')

# indexがない場合、下記でマッピングしたテンプレートが読み込まれる
def home(request):
    return render(request, 'reserve/home.html',{})

def reserve(request):
    return render(request, 'reserve/reserve.html',{})

def reservedetails(request):
    return render(request, 'reserve/reservedetails.html',{})

def mypage(request):
    return render(request, 'reserve/mypage.html',{})

def mypagesettings(request):
    return render(request, 'reserve/mypagesettings.html',{})

def login(request):
    return render(request, 'reserve/login.html',{})

def register(request):
    return render(request, 'reserve/register.html',{})